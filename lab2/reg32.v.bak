module reg32(
	input [31:0] D,
	input [3:0] byteenable,
	input reset,
	input clk,
	output [31:0] Q
);
//////////////////////////////////////
	reg [31:0] intern_reg;

////////////////
	
	assign Q = intern_reg;
	
///////////////
	
	always @ (posedge clk)
	begin
	
		if (~reset) begin
			intern_reg <= 32'd0
		end
		else begin
	
		case (byteenable)
			'b1111: intern_reg 			<= D;
			'b0011: intern_reg[15:0] 	<= D[15:0];
			'b1100: intern_reg[31:16] 	<= D[31:16];
			'b0001: intern_reg[7:0] 	<= D[7:0];
			'b0010: intern_reg[15:8] 	<= D[15:8];
			'b0100: intern_reg[23:16] 	<= D[23:16];
			'b1000: intern_reg[31:24] 	<= D[31:24];
			default:begin
			
			end// default		
		endcase// case
		end // else
	end// always
endmodule





// Quartus II Verilog Template
// Single port RAM with single read/write address 

module single_port_ram 
#(parameter DATA_WIDTH=8, parameter ADDR_WIDTH=6)
(
	input [(DATA_WIDTH-1):0] data,
	input [(ADDR_WIDTH-1):0] addr,
	input we, clk,
	output [(DATA_WIDTH-1):0] q
);

	// Declare the RAM variable
	reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];

	// Variable to hold the registered read address
	reg [ADDR_WIDTH-1:0] addr_reg;

	always @ (posedge clk)
	begin
		// Write
		if (we)
			ram[addr] <= data;

		addr_reg <= addr;
	end

	// Continuous assignment implies read returns NEW data.
	// This is the natural behavior of the TriMatrix memory
	// blocks in Single Port mode.  
	assign q = ram[addr_reg];

endmodule




















